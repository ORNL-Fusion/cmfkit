#!/bin/bash


_readybake_isolate_buildpath() {

  local readonly base_image="$1"
  local path_dockerfile
  local match_count
  local rc

  read match_count <<< $(
    grep  --recursive \
          --files-with-matches \
        "^FROM ${base_image}" $CMFKIT_DUGOUT_DIR/platform/readybake* \
      | wc -l
  )

  [[ ${match_count} -eq 1 ]] || return 1

  read path_dockerfile <<< $(
    grep  --recursive \
          --files-with-matches \
        "^FROM ${base_image}" $CMFKIT_DUGOUT_DIR/platform/readybake* \
  )

  CMFKIT_READYBAKE_BUILD_PATH="${path_dockerfile%/*}"
}


_readybake_yield_image() {

  [[ -n "$CMFKIT_READYBAKE_BUILD_PATH" ]] || return 1

  local readonly image_tag="localhost:5000/${CMFKIT_READYBAKE_BUILD_PATH##*/}"

  cd $CMFKIT_READYBAKE_BUILD_PATH

  DOCKER_BUILDKIT=1 docker build --tag "${image_tag}" .
  rc="$?"

  cd - >/dev/null

  [[ ${rc} -eq 0 ]] || return "${rc}"

  CMFKIT_READYBAKE_IMAGE="${image_tag}:latest"
}


_readybake_init() {

  [[ -n "$CMFKIT_READYBAKE_IMAGE_SEED" ]] || return 1
  [[ -n "$CMFKIT_READYBAKE_IMAGE"  ]] || return 1
  [[ -n "$CMFKIT_DUGOUT_DIR"       ]] || return 1
  [[ -n "$CMFKIT_SOURCE_DIR"       ]] || return 1
  [[ -n "$CMFKIT_PLATFORM"         ]] || return 1
  [[ -n "$CMFKIT_SCENARIO"         ]] || return 1

  local readonly readybake_image="$CMFKIT_READYBAKE_IMAGE"
  local readonly scenario_phase="$CMFKIT_SCENARIO_PHASE_SELECT"
  local readonly dugout_dir="$CMFKIT_DUGOUT_DIR"
  local readonly source_dir="$CMFKIT_SOURCE_DIR"

  local container_id

  read container_id <<< $(
    docker create \
        --interactive --tty \
        --env CMFKIT_SCENARIO=$CMFKIT_SCENARIO \
        --env CMFKIT_READYBAKE_IMAGE_SEED=$CMFKIT_READYBAKE_IMAGE_SEED \
        --workdir /usr/local/src \
      ${readybake_image} 
  )
#/bin/sh -c "./readybake_launch.sh ${scenario_phase}"
  #read container_id <<< $( docker create --interactive ${readybake_image} --workdir /var/cmfkit /bin/sh -c "./readybake_launch.sh" )

  [[ -n ${container_id} ]] || return 1

  #_debug "_readybake_init() $(pwd -P)"

  cat > ${dugout_dir}/readybake_launch.sh <<-__EOF__

	#!/bin/bash

	. ./mod_common
	. ./mod_deflist
	. ./scenario/\$CMFKIT_SCENARIO

	[[ -z "\$1" ]] \\
	  && ( __build || _error "build failure: 'scenario/\$CMFKIT_SCENARIO' on '$CMFKIT_PLATFORM'" ) \\
	  && ( __test  || _error  "test failure: 'scenario/\$CMFKIT_SCENARIO' on '$CMFKIT_PLATFORM'" )

	[[ "\$1" =~ build|test ]] \\
	  && ( "__\$1"  || _error  "\$1 failure: 'scenario/\$CMFKIT_SCENARIO' on '$CMFKIT_PLATFORM'" )

	__EOF__

  #chmod +x ${dugout_dir}/readybake_launch.sh

  #rm -rf ${dugout_dir}/platform

  docker cp ${dugout_dir}/             ${container_id}:/var/cmfkit
  docker cp ${source_dir}/mod_common   ${container_id}:/var/cmfkit
  docker cp ${source_dir}/mod_deflist  ${container_id}:/var/cmfkit

  CMFKIT_READYBAKE_CONTAINER_ID="${container_id}"
}


_readybake_exec() {

  [[ -n "$CMFKIT_READYBAKE_CONTAINER_ID" ]] || return 1

  docker start   $CMFKIT_READYBAKE_CONTAINER_ID

  #docker exec --interactive $CMFKIT_READYBAKE_CONTAINER_ID /bin/sh -c "echo thinger" ; rc="$?"
  docker attach  $CMFKIT_READYBAKE_CONTAINER_ID

  docker stop    $CMFKIT_READYBAKE_CONTAINER_ID
  docker rm      $CMFKIT_READYBAKE_CONTAINER_ID

  echo
}


CMFKIT_READYBAKE_BUILD_PATH=''
CMFKIT_READYBAKE_CONTAINER_ID=''
CMFKIT_READYBAKE_INTERACTIVE="${CMFKIT_READYBAKE_INTERACTIVE:-false}"

